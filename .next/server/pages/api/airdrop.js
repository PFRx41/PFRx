"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/airdrop";
exports.ids = ["pages/api/airdrop"];
exports.modules = {

/***/ "@solana/web3.js":
/*!**********************************!*\
  !*** external "@solana/web3.js" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("@solana/web3.js");

/***/ }),

/***/ "axios?6fac":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "bs58":
/*!***********************!*\
  !*** external "bs58" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("bs58");

/***/ }),

/***/ "exceljs":
/*!**************************!*\
  !*** external "exceljs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("exceljs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fairdrop&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cairdrop.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fairdrop&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cairdrop.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_airdrop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\airdrop.js */ \"(api)/./pages/api/airdrop.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_airdrop_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_airdrop_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/airdrop\",\n        pathname: \"/api/airdrop\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_airdrop_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFpcmRyb3AmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2FpcmRyb3AuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDcUQ7QUFDckQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haXJkcm9wLWRhc2hib2FyZC8/OTI5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGFpcmRyb3AuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9haXJkcm9wXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWlyZHJvcFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fairdrop&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cairdrop.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/excel.js":
/*!**********************!*\
  !*** ./lib/excel.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ExcelJS = __webpack_require__(/*! exceljs */ \"exceljs\");\nconst fs = (__webpack_require__(/*! fs */ \"fs\").promises);\nasync function appendToExcel(date, claimed, airdropped) {\n    const workbook = new ExcelJS.Workbook();\n    const filePath = \"/tmp/dashboard_data.xlsx\";\n    try {\n        if (await fs.access(filePath).then(()=>true).catch(()=>false)) {\n            await workbook.xlsx.readFile(filePath);\n        }\n        let sheet = workbook.getWorksheet(\"Data\");\n        if (!sheet) {\n            sheet = workbook.addWorksheet(\"Data\");\n            sheet.addRow([\n                \"Date\",\n                \"Fees Claimed (SOL)\",\n                \"Airdrops Sent (SOL)\"\n            ]);\n        }\n        sheet.addRow([\n            date.toISOString(),\n            claimed,\n            airdropped\n        ]);\n        await workbook.xlsx.writeFile(filePath);\n    } catch (error) {\n        throw new Error(`Error writing to Excel: ${error.message}`);\n    }\n}\nasync function readExcelData() {\n    const filePath = \"/tmp/dashboard_data.xlsx\";\n    try {\n        if (!await fs.access(filePath).then(()=>true).catch(()=>false)) {\n            return {\n                data: [],\n                totalClaimed: 0,\n                totalAirdropped: 0,\n                lastUpdated: null\n            };\n        }\n        const workbook = new ExcelJS.Workbook();\n        await workbook.xlsx.readFile(filePath);\n        const sheet = workbook.getWorksheet(\"Data\");\n        if (!sheet) {\n            return {\n                data: [],\n                totalClaimed: 0,\n                totalAirdropped: 0,\n                lastUpdated: null\n            };\n        }\n        const data = [];\n        let totalClaimed = 0;\n        let totalAirdropped = 0;\n        let lastUpdated = null;\n        sheet.eachRow((row, rowNumber)=>{\n            if (rowNumber === 1) return; // Skip header\n            const rowData = {\n                Date: row.getCell(1).value,\n                \"Fees Claimed (SOL)\": row.getCell(2).value || 0,\n                \"Airdrops Sent (SOL)\": row.getCell(3).value || 0\n            };\n            totalClaimed += rowData[\"Fees Claimed (SOL)\"];\n            totalAirdropped += rowData[\"Airdrops Sent (SOL)\"];\n            if (!lastUpdated || new Date(rowData.Date) > new Date(lastUpdated)) {\n                lastUpdated = rowData.Date;\n            }\n            data.push(rowData);\n        });\n        return {\n            data,\n            totalClaimed,\n            totalAirdropped,\n            lastUpdated\n        };\n    } catch (error) {\n        throw new Error(`Error reading dashboard data: ${error.message}`);\n    }\n}\nmodule.exports = {\n    appendToExcel,\n    readExcelData\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFeGNlbEpTID0gcmVxdWlyZShcImV4Y2VsanNcIik7XHJcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpLnByb21pc2VzO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gYXBwZW5kVG9FeGNlbChkYXRlLCBjbGFpbWVkLCBhaXJkcm9wcGVkKSB7XHJcbiAgY29uc3Qgd29ya2Jvb2sgPSBuZXcgRXhjZWxKUy5Xb3JrYm9vaygpO1xyXG4gIGNvbnN0IGZpbGVQYXRoID0gXCIvdG1wL2Rhc2hib2FyZF9kYXRhLnhsc3hcIjtcclxuICB0cnkge1xyXG4gICAgaWYgKGF3YWl0IGZzLmFjY2VzcyhmaWxlUGF0aCkudGhlbigoKSA9PiB0cnVlKS5jYXRjaCgoKSA9PiBmYWxzZSkpIHtcclxuICAgICAgYXdhaXQgd29ya2Jvb2sueGxzeC5yZWFkRmlsZShmaWxlUGF0aCk7XHJcbiAgICB9XHJcbiAgICBsZXQgc2hlZXQgPSB3b3JrYm9vay5nZXRXb3Jrc2hlZXQoXCJEYXRhXCIpO1xyXG4gICAgaWYgKCFzaGVldCkge1xyXG4gICAgICBzaGVldCA9IHdvcmtib29rLmFkZFdvcmtzaGVldChcIkRhdGFcIik7XHJcbiAgICAgIHNoZWV0LmFkZFJvdyhbXCJEYXRlXCIsIFwiRmVlcyBDbGFpbWVkIChTT0wpXCIsIFwiQWlyZHJvcHMgU2VudCAoU09MKVwiXSk7XHJcbiAgICB9XHJcbiAgICBzaGVldC5hZGRSb3coW2RhdGUudG9JU09TdHJpbmcoKSwgY2xhaW1lZCwgYWlyZHJvcHBlZF0pO1xyXG4gICAgYXdhaXQgd29ya2Jvb2sueGxzeC53cml0ZUZpbGUoZmlsZVBhdGgpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdyaXRpbmcgdG8gRXhjZWw6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRFeGNlbERhdGEoKSB7XHJcbiAgY29uc3QgZmlsZVBhdGggPSBcIi90bXAvZGFzaGJvYXJkX2RhdGEueGxzeFwiO1xyXG4gIHRyeSB7XHJcbiAgICBpZiAoIShhd2FpdCBmcy5hY2Nlc3MoZmlsZVBhdGgpLnRoZW4oKCkgPT4gdHJ1ZSkuY2F0Y2goKCkgPT4gZmFsc2UpKSkge1xyXG4gICAgICByZXR1cm4geyBkYXRhOiBbXSwgdG90YWxDbGFpbWVkOiAwLCB0b3RhbEFpcmRyb3BwZWQ6IDAsIGxhc3RVcGRhdGVkOiBudWxsIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCB3b3JrYm9vayA9IG5ldyBFeGNlbEpTLldvcmtib29rKCk7XHJcbiAgICBhd2FpdCB3b3JrYm9vay54bHN4LnJlYWRGaWxlKGZpbGVQYXRoKTtcclxuICAgIGNvbnN0IHNoZWV0ID0gd29ya2Jvb2suZ2V0V29ya3NoZWV0KFwiRGF0YVwiKTtcclxuICAgIGlmICghc2hlZXQpIHtcclxuICAgICAgcmV0dXJuIHsgZGF0YTogW10sIHRvdGFsQ2xhaW1lZDogMCwgdG90YWxBaXJkcm9wcGVkOiAwLCBsYXN0VXBkYXRlZDogbnVsbCB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YSA9IFtdO1xyXG4gICAgbGV0IHRvdGFsQ2xhaW1lZCA9IDA7XHJcbiAgICBsZXQgdG90YWxBaXJkcm9wcGVkID0gMDtcclxuICAgIGxldCBsYXN0VXBkYXRlZCA9IG51bGw7XHJcbiAgICBzaGVldC5lYWNoUm93KChyb3csIHJvd051bWJlcikgPT4ge1xyXG4gICAgICBpZiAocm93TnVtYmVyID09PSAxKSByZXR1cm47IC8vIFNraXAgaGVhZGVyXHJcbiAgICAgIGNvbnN0IHJvd0RhdGEgPSB7XHJcbiAgICAgICAgRGF0ZTogcm93LmdldENlbGwoMSkudmFsdWUsXHJcbiAgICAgICAgXCJGZWVzIENsYWltZWQgKFNPTClcIjogcm93LmdldENlbGwoMikudmFsdWUgfHwgMCxcclxuICAgICAgICBcIkFpcmRyb3BzIFNlbnQgKFNPTClcIjogcm93LmdldENlbGwoMykudmFsdWUgfHwgMCxcclxuICAgICAgfTtcclxuICAgICAgdG90YWxDbGFpbWVkICs9IHJvd0RhdGFbXCJGZWVzIENsYWltZWQgKFNPTClcIl07XHJcbiAgICAgIHRvdGFsQWlyZHJvcHBlZCArPSByb3dEYXRhW1wiQWlyZHJvcHMgU2VudCAoU09MKVwiXTtcclxuICAgICAgaWYgKCFsYXN0VXBkYXRlZCB8fCBuZXcgRGF0ZShyb3dEYXRhLkRhdGUpID4gbmV3IERhdGUobGFzdFVwZGF0ZWQpKSB7XHJcbiAgICAgICAgbGFzdFVwZGF0ZWQgPSByb3dEYXRhLkRhdGU7XHJcbiAgICAgIH1cclxuICAgICAgZGF0YS5wdXNoKHJvd0RhdGEpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4geyBkYXRhLCB0b3RhbENsYWltZWQsIHRvdGFsQWlyZHJvcHBlZCwgbGFzdFVwZGF0ZWQgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciByZWFkaW5nIGRhc2hib2FyZCBkYXRhOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBhcHBlbmRUb0V4Y2VsLFxyXG4gIHJlYWRFeGNlbERhdGEsXHJcbn07Il0sIm5hbWVzIjpbIkV4Y2VsSlMiLCJyZXF1aXJlIiwiZnMiLCJwcm9taXNlcyIsImFwcGVuZFRvRXhjZWwiLCJkYXRlIiwiY2xhaW1lZCIsImFpcmRyb3BwZWQiLCJ3b3JrYm9vayIsIldvcmtib29rIiwiZmlsZVBhdGgiLCJhY2Nlc3MiLCJ0aGVuIiwiY2F0Y2giLCJ4bHN4IiwicmVhZEZpbGUiLCJzaGVldCIsImdldFdvcmtzaGVldCIsImFkZFdvcmtzaGVldCIsImFkZFJvdyIsInRvSVNPU3RyaW5nIiwid3JpdGVGaWxlIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJyZWFkRXhjZWxEYXRhIiwiZGF0YSIsInRvdGFsQ2xhaW1lZCIsInRvdGFsQWlyZHJvcHBlZCIsImxhc3RVcGRhdGVkIiwiZWFjaFJvdyIsInJvdyIsInJvd051bWJlciIsInJvd0RhdGEiLCJEYXRlIiwiZ2V0Q2VsbCIsInZhbHVlIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/excel.js\n");

/***/ }),

/***/ "(api)/./lib/solana.js":
/*!***********************!*\
  !*** ./lib/solana.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Connection, Keypair, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL, VersionedTransaction } = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\nconst axios = __webpack_require__(/*! axios */ \"axios?6fac\");\nconst bs58 = __webpack_require__(/*! bs58 */ \"bs58\");\nasync function initializeKeypair() {\n    try {\n        try {\n            const secretKeyArray = JSON.parse(process.env.PRIVATE_KEY);\n            const secretKeyBytes = Uint8Array.from(secretKeyArray);\n            if (secretKeyBytes.length !== 64) {\n                throw new Error(`Secret key must be 64 bytes, got ${secretKeyBytes.length}`);\n            }\n            return Keypair.fromSecretKey(secretKeyBytes);\n        } catch (jsonError) {\n            try {\n                const secretKeyBytes = bs58.decode(process.env.PRIVATE_KEY);\n                if (secretKeyBytes.length !== 64) {\n                    throw new Error(`Base58 secret key must decode to 64 bytes, got ${secretKeyBytes.length}`);\n                }\n                return Keypair.fromSecretKey(secretKeyBytes);\n            } catch (bs58Error) {\n                throw new Error(`Invalid private key format: JSON error (${jsonError.message}), Base58 error (${bs58Error.message})`);\n            }\n        }\n    } catch (error) {\n        throw new Error(`Invalid secret key: ${error.message}`);\n    }\n}\nasync function claimFeesForToken(tokenMint, connection, keypair, logToFile) {\n    try {\n        await logToFile(`Claiming fees for token ${tokenMint} with wallet ${keypair.publicKey.toBase58()} on devnet`);\n        const initialBalance = await connection.getBalance(keypair.publicKey, \"confirmed\");\n        const response = await axios.post(\"https://pumpportal.fun/api/trade-local\", {\n            publicKey: keypair.publicKey.toBase58(),\n            action: \"collectCreatorFee\",\n            priorityFee: 0.000001\n        });\n        const messageBytes = Buffer.from(response.data, \"base64\");\n        const message = VersionedTransaction.deserialize(messageBytes).message;\n        const tx = new VersionedTransaction(message);\n        tx.sign([\n            keypair\n        ]);\n        const signature = await connection.sendTransaction(tx, {\n            preflightCommitment: \"confirmed\"\n        });\n        await connection.confirmTransaction(signature, \"confirmed\");\n        const finalBalance = await connection.getBalance(keypair.publicKey, \"confirmed\");\n        const txDetails = await connection.getTransaction(signature, {\n            commitment: \"confirmed\",\n            maxSupportedTransactionVersion: 0\n        });\n        const txFee = txDetails.meta.fee;\n        const claimedLamports = finalBalance - initialBalance + txFee;\n        const claimedSol = claimedLamports / LAMPORTS_PER_SOL;\n        await logToFile(`Transaction confirmed: https://solscan.io/tx/${signature}?cluster=devnet`);\n        await logToFile(`Claimed ${claimedSol.toFixed(6)} SOL on devnet`);\n        return claimedSol;\n    } catch (error) {\n        await logToFile(`Unexpected error in claimFeesForToken on devnet: ${error.message}`);\n        return 0;\n    }\n}\nasync function getTokenDecimals(mintAddress, logToFile) {\n    const url = process.env.HELIUS_RPC_URL;\n    const payload = {\n        jsonrpc: \"2.0\",\n        id: \"get-account-info\",\n        method: \"getAccountInfo\",\n        params: [\n            mintAddress,\n            {\n                encoding: \"jsonParsed\"\n            }\n        ]\n    };\n    try {\n        const response = await axios.post(url, payload);\n        if (!response.data.result?.value) {\n            throw new Error(`No account info found for mint ${mintAddress} on mainnet`);\n        }\n        const decimals = response.data.result.value.data.parsed.info.decimals;\n        await logToFile(`Fetched decimals: ${decimals} for mint ${mintAddress} on mainnet`);\n        return decimals;\n    } catch (error) {\n        await logToFile(`Failed to fetch decimals for mint ${mintAddress} on mainnet: ${error.message}`);\n        throw error;\n    }\n}\nasync function fetchTokenHolders(tokenMintAddress, logToFile) {\n    const url = process.env.HELIUS_RPC_URL;\n    const decimals = await getTokenDecimals(tokenMintAddress, logToFile);\n    await logToFile(`Token decimals: ${decimals}`);\n    let page = 1;\n    const allHolders = [];\n    while(true){\n        const payload = {\n            jsonrpc: \"2.0\",\n            id: \"helius-test\",\n            method: \"getTokenAccounts\",\n            params: {\n                page: page,\n                limit: 1000,\n                mint: tokenMintAddress,\n                displayOptions: {}\n            }\n        };\n        try {\n            const response = await axios.post(url, payload);\n            if (response.status !== 200) {\n                const errorMsg = `Error fetching holders from mainnet: ${response.status}, ${response.statusText}`;\n                await logToFile(errorMsg);\n                break;\n            }\n            const data = response.data;\n            if (!data.result?.token_accounts?.length) {\n                const msg = `No more results from mainnet. Total pages processed: ${page - 1}`;\n                await logToFile(msg);\n                break;\n            }\n            await logToFile(`Processing page ${page} with ${data.result.token_accounts.length} accounts from mainnet`);\n            for (const account of data.result.token_accounts){\n                if (account.amount > 0) {\n                    const balance = account.amount / Math.pow(10, decimals);\n                    allHolders.push({\n                        holder_address: account.owner,\n                        balance: balance,\n                        token_account: account.address\n                    });\n                }\n            }\n            page++;\n        } catch (error) {\n            const errorMsg = `Error fetching page ${page} from mainnet: ${error.message}`;\n            await logToFile(errorMsg);\n            break;\n        }\n    }\n    return allHolders;\n}\nasync function validateMainnetAddress(connection, address, logToFile) {\n    try {\n        const pubkey = new PublicKey(address);\n        const accountInfo = await connection.getAccountInfo(pubkey, \"confirmed\");\n        const exists = !!accountInfo;\n        await logToFile(`Validated address ${address} on devnet: ${exists ? \"Exists\" : \"Does not exist\"}`);\n        return exists;\n    } catch (error) {\n        await logToFile(`Error validating address ${address} on devnet: ${error.message}`);\n        return false;\n    }\n}\nasync function sendAirdrop(connection, keypair, recipients, logToFile) {\n    const senderPubkey = keypair.publicKey;\n    const TRANSACTION_FEE = 5000;\n    const totalAmount = recipients.reduce((sum, { amount })=>sum + amount, 0);\n    const balance = await connection.getBalance(senderPubkey, \"confirmed\");\n    if (balance < totalAmount + TRANSACTION_FEE * recipients.length) {\n        const errorMsg = `Insufficient funds on devnet. Have: ${balance / LAMPORTS_PER_SOL} SOL, Need: ${(totalAmount + TRANSACTION_FEE * recipients.length) / LAMPORTS_PER_SOL} SOL`;\n        await logToFile(errorMsg);\n        return 0;\n    }\n    let totalSentLamports = 0;\n    for (const { address, amount } of recipients){\n        if (amount <= 0) {\n            await logToFile(`Skipping zero or negative amount for ${address}`);\n            continue;\n        }\n        try {\n            await logToFile(`Preparing to send ${amount / LAMPORTS_PER_SOL} SOL from ${senderPubkey} to ${address} on devnet`);\n            let success = false;\n            for(let attempt = 1; attempt <= 3; attempt++){\n                try {\n                    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash(\"confirmed\");\n                    const transaction = new Transaction({\n                        recentBlockhash: blockhash,\n                        feePayer: senderPubkey\n                    }).add(SystemProgram.transfer({\n                        fromPubkey: senderPubkey,\n                        toPubkey: new PublicKey(address),\n                        lamports: Math.floor(amount)\n                    }));\n                    const signature = await connection.sendTransaction(transaction, [\n                        keypair\n                    ], {\n                        skipPreflight: false\n                    });\n                    await logToFile(`Transaction sent with signature: ${signature} to ${address} on devnet`);\n                    const confirmation = await connection.confirmTransaction({\n                        signature,\n                        blockhash,\n                        lastValidBlockHeight\n                    }, \"confirmed\");\n                    if (confirmation.value.err) {\n                        throw new Error(`Transaction failed: ${confirmation.value.err}`);\n                    }\n                    await logToFile(`Airdrop successful! Sent ${amount / LAMPORTS_PER_SOL} SOL to ${address} on devnet`);\n                    success = true;\n                    break;\n                } catch (error) {\n                    await logToFile(`Error on attempt ${attempt} for ${address} on devnet: ${error.message}`);\n                    await new Promise((resolve)=>setTimeout(resolve, 3000));\n                }\n            }\n            if (success) {\n                totalSentLamports += amount;\n            }\n        } catch (error) {\n            await logToFile(`Critical error sending to ${address} on devnet: ${error.message}`);\n        }\n    }\n    return totalSentLamports;\n}\nmodule.exports = {\n    initializeKeypair,\n    claimFeesForToken,\n    fetchTokenHolders,\n    validateMainnetAddress,\n    sendAirdrop\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/solana.js\n");

/***/ }),

/***/ "(api)/./pages/api/airdrop.js":
/*!******************************!*\
  !*** ./pages/api/airdrop.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst { Connection, LAMPORTS_PER_SOL } = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\nconst fs = (__webpack_require__(/*! fs */ \"fs\").promises);\nconst path = __webpack_require__(/*! path */ \"path\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst { initializeKeypair, claimFeesForToken, fetchTokenHolders, validateMainnetAddress, sendAirdrop } = __webpack_require__(/*! ../../lib/solana */ \"(api)/./lib/solana.js\");\nconst { appendToExcel } = __webpack_require__(/*! ../../lib/excel */ \"(api)/./lib/excel.js\");\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const connection = new Connection(\"https://api.devnet.solana.com\", \"confirmed\");\n    let keypair;\n    try {\n        keypair = await initializeKeypair();\n    } catch (error) {\n        await logToFile(`Invalid secret key: ${error.message}`);\n        return res.status(500).json({\n            error: `Invalid secret key: ${error.message}`\n        });\n    }\n    async function logToFile(message, logFile = path.join(os.tmpdir(), \"airdrop_log.txt\")) {\n        const timestamp = new Date().toISOString().replace(/T/, \" \").replace(/\\..+/, \"\");\n        try {\n            await fs.appendFile(logFile, `[${timestamp}] ${message}\\n`);\n        } catch (err) {\n            console.error(`Failed to write to log file ${logFile}: ${err.message}`);\n            throw err;\n        }\n    }\n    try {\n        await logToFile(`Starting airdrop cycle (holder scraping on mainnet, airdrop on devnet). Temp directory: ${os.tmpdir()}`);\n        const claimedSol = await claimFeesForToken(process.env.TOKEN_MINT_ADDRESS, connection, keypair, logToFile);\n        await logToFile(\"Fetching token holders from mainnet...\");\n        const holders = await fetchTokenHolders(process.env.TOKEN_MINT_ADDRESS, logToFile);\n        const qualifiedHolders = [];\n        for (const holder of holders){\n            if (await validateMainnetAddress(connection, holder.holder_address, logToFile)) {\n                qualifiedHolders.push(holder);\n            }\n        }\n        const outputContent = [\n            `Token Holders for Mint: ${process.env.TOKEN_MINT_ADDRESS} (fetched from mainnet)`,\n            `Total Holders: ${holders.length}`,\n            `Qualified Holders (on devnet): ${qualifiedHolders.length}`,\n            \"-\".repeat(50),\n            ...holders.map((holder)=>`Holder: ${holder.holder_address}, Balance: ${holder.balance}, Token Account: ${holder.token_account}, Qualified: ${qualifiedHolders.some((q)=>q.holder_address === holder.holder_address) ? \"Yes\" : \"No\"}`)\n        ].join(\"\\n\");\n        const holdersFilePath = path.join(os.tmpdir(), \"token_holders.txt\");\n        await fs.writeFile(holdersFilePath, outputContent);\n        await logToFile(`Saved ${holders.length} token holders (${qualifiedHolders.length} qualified) to ${holdersFilePath}`);\n        const balance = await connection.getBalance(keypair.publicKey, \"confirmed\");\n        await logToFile(`Devnet wallet balance: ${balance / LAMPORTS_PER_SOL} SOL`);\n        let airdroppedLamports = 0;\n        const MINIMUM_BALANCE = 0.2 * LAMPORTS_PER_SOL;\n        if (balance > MINIMUM_BALANCE) {\n            const distributableLamports = Math.floor(balance - MINIMUM_BALANCE);\n            await logToFile(`Distributable amount: ${distributableLamports / LAMPORTS_PER_SOL} SOL`);\n            const feeWalletValid = await validateMainnetAddress(connection, process.env.FEE_WALLET_ADDRESS, logToFile);\n            if (!feeWalletValid) {\n                await logToFile(`Fee wallet ${process.env.FEE_WALLET_ADDRESS} does not exist on devnet`);\n                return res.status(400).json({\n                    error: `Fee wallet ${process.env.FEE_WALLET_ADDRESS} does not exist on devnet`\n                });\n            }\n            const feeAmount = Math.floor(distributableLamports * 0.1);\n            let holdersAmount = distributableLamports - feeAmount;\n            const holdersCount = qualifiedHolders.length;\n            const recipients = [];\n            let weights = [];\n            if (feeAmount > 0) {\n                recipients.push({\n                    address: process.env.FEE_WALLET_ADDRESS,\n                    amount: feeAmount\n                });\n            }\n            if (holdersCount > 0 && holdersAmount > 0) {\n                weights = qualifiedHolders.map((holder)=>Math.log10(holder.balance + 1));\n                const totalWeight = weights.reduce((sum, weight)=>sum + weight, 0);\n                if (totalWeight <= 0) {\n                    await logToFile(\"No valid weights for holders, sending all to fee wallet\");\n                    recipients[0].amount += holdersAmount;\n                    holdersAmount = 0;\n                } else {\n                    for(let i = 0; i < qualifiedHolders.length; i++){\n                        const holder = qualifiedHolders[i];\n                        const weight = weights[i];\n                        const amount = Math.floor(weight / totalWeight * holdersAmount);\n                        if (amount > 0) {\n                            recipients.push({\n                                address: holder.holder_address,\n                                amount\n                            });\n                        }\n                    }\n                    const totalHoldersAmount = recipients.slice(1).reduce((sum, r)=>sum + r.amount, 0);\n                    if (holdersAmount > totalHoldersAmount) {\n                        recipients[0].amount += holdersAmount - totalHoldersAmount;\n                    }\n                }\n            } else if (holdersAmount > 0) {\n                recipients[0].amount += holdersAmount;\n                holdersAmount = 0;\n            }\n            const distributionContent = [\n                \"\\nAirdrop Distribution (on devnet, 10% fee wallet, 90% holders with logarithmic weighting)\",\n                \"-\".repeat(50),\n                `Fee Wallet (${process.env.FEE_WALLET_ADDRESS}): ${(recipients.find((r)=>r.address === process.env.FEE_WALLET_ADDRESS)?.amount || 0) / LAMPORTS_PER_SOL} SOL`,\n                ...qualifiedHolders.map((holder, i)=>`Holder (${holder.holder_address}): ${(recipients.find((r)=>r.address === holder.holder_address)?.amount || 0) / LAMPORTS_PER_SOL} SOL (Weight: ${(weights[i] || 0).toFixed(4)})`)\n            ].join(\"\\n\");\n            await fs.appendFile(holdersFilePath, distributionContent);\n            await logToFile(distributionContent);\n            if (recipients.length > 0) {\n                airdroppedLamports = await sendAirdrop(connection, keypair, recipients, logToFile);\n                if (airdroppedLamports > 0) {\n                    await logToFile(\"Airdrop completed successfully on devnet\");\n                } else {\n                    await logToFile(\"Airdrop failed on devnet, see logs for details\");\n                }\n            } else {\n                await logToFile(\"No valid recipients, skipping airdrop on devnet\");\n            }\n        } else {\n            await logToFile(\"Devnet wallet balance <= 0.2 SOL, skipping airdrop\");\n        }\n        const airdroppedSol = airdroppedLamports / LAMPORTS_PER_SOL;\n        await appendToExcel(new Date(), claimedSol, airdroppedSol);\n        res.status(200).json({\n            message: \"Airdrop cycle completed\",\n            claimedSol,\n            airdroppedSol\n        });\n    } catch (error) {\n        await logToFile(`Error in airdrop loop: ${error.message}`);\n        res.status(500).json({\n            error: `Error in airdrop loop: ${error.message}`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/airdrop.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fairdrop&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cairdrop.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();